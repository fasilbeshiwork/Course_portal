// Mocks generated by Mockito 5.0.16 from annotations
// in course_portal/test/bloc/login_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:course_portal/data/models/user_.dart' as _i2;
import 'package:course_portal/data/repositories/authentication_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUser_0 extends _i1.Fake implements _i2.User {}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i3.AuthenticationRepository {
  MockAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i3.AuthenticationStatus> get status =>
      (super.noSuchMethod(Invocation.getter(#status),
              returnValue: Stream<_i3.AuthenticationStatus>.empty())
          as _i4.Stream<_i3.AuthenticationStatus>);
  @override
  _i4.Future<_i2.User> logIn({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#logIn, [], {#email: email, #password: password}),
          returnValue:
              Future<_i2.User>.value(_FakeUser_0())) as _i4.Future<_i2.User>);
  @override
  _i4.Future<_i2.User> register(
          {String? name,
          String? email,
          String? password,
          String? passwordConf,
          String? role}) =>
      (super.noSuchMethod(
              Invocation.method(#register, [], {
                #name: name,
                #email: email,
                #password: password,
                #passwordConf: passwordConf,
                #role: role
              }),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i4.Future<_i2.User>);
  @override
  void logOut() => super.noSuchMethod(Invocation.method(#logOut, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
